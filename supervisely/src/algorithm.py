import matplotlib.pyplot as plt
import numpy as np
import os

from dotenv import load_dotenv
from dotenv import dotenv_values
from collections import namedtuple
import json
import yaml
import supervisely_lib as sly

import sys
sys.path.append('../../')
from src.bounding_box import BoundingBox
from src.utils.enumerators import BBFormat, BBType, CoordinatesType
from src.evaluators.pascal_voc_evaluator import get_pascalvoc_metrics
from src.utils.enumerators import MethodAveragePrecision

# statistic data structure
result = namedtuple('Result', ['TP', 'FP', 'Precision', 'Recall', 'AP'])
image_bbs = namedtuple('image_bbs', ['image', 'bbs'])
api: sly.Api = sly.Api.from_env()


def get_data(src_project: sly.project, dst_project: sly.project, batch_size=10) -> tuple:
    projects = {
        'src': src_project,
        'dst': dst_project
    }
    result_dict = dict()
    result_list = list()
    for key, project in projects.items():
        bb_type = BBType.GROUND_TRUTH if key == 'src' else BBType.DETECTED
        result_dict[key] = dict()
        datasets = api.dataset.get_list(project.id)
        for dataset in datasets:
            result_dict[key][dataset.name] = dict()
            image_list = api.image.get_list(dataset.id)
            for idx, batch in enumerate(sly.batched(image_list, batch_size)):
                if idx == 10:
                    break
                image_ids   = [image_info.id for image_info in batch]
                annotations = api.annotation.download_batch(dataset.id, image_ids)
                for idx, annotation in enumerate(annotations):
                    img_bbs = plt2bb(annotation, bb_type=bb_type)
                    result_dict[key][dataset.name][image_ids[idx]] = dict(img=batch[idx], bbs=img_bbs)
                    result_list.append([key, dataset.id, dataset.name, batch[idx].id, batch[idx].image_name, batch[idx].full_storage_url])
    return result_dict, result_list


def get_data_v1(src_project: sly.project, dst_project: sly.project, batch_size=10) -> tuple:
    projects = {
        'src': src_project,
        'dst': dst_project
    }
    result_list = list()
    for key, project in projects.items():
        bb_type = BBType.GROUND_TRUTH if key == 'src' else BBType.DETECTED
        datasets = api.dataset.get_list(project.id)
        for dataset in datasets:
            image_list = api.image.get_list(dataset.id)
            for idx, batch in enumerate(sly.batched(image_list, batch_size)):
                if idx == 10:
                    break
                image_ids   = [image_info.id for image_info in batch]
                annotations = api.annotation.download_batch(dataset.id, image_ids)
                for idx, annotation in enumerate(annotations):
                    img_bbs = plt2bb(annotation, bb_type=bb_type)
                    result_list.append([key, dataset.id, dataset.name, batch[idx].id, batch[idx].name, batch[idx].full_storage_url, img_bbs])
    return result_list


def plt2bb(batch_element,
           type_coordinates = CoordinatesType.ABSOLUTE,
           bb_type          = BBType.GROUND_TRUTH,
           format           = BBFormat.XYX2Y2):
    # type_coordinates = CoordinatesType.X : ABSOLUTE, RELATIVE
    # bb_type          = BBType.X          : GROUND_TRUTH, DETECTED
    # format           = BBFormat.X        : XYX2Y2, XYWH, PASCAL_XML, YOLO
    ret = []
    annotations = batch_element.annotation['objects']
    for ann in annotations:
        class_title = ann['classTitle']
        try:
            points = ann['points']['exterior']
        except:
            print('annotation = ', ann)
            break
        x1, y1 = points[0]
        x2, y2 = points[1]
        width  = batch_element.annotation['size']['width']
        height = batch_element.annotation['size']['height']
        confidence = None if bb_type == BBType.GROUND_TRUTH else ann['tags'][0]['value']
        bb = BoundingBox(image_name      = batch_element.image_name,
                         class_id        = class_title,
                         coordinates     = (x1, y1, x2, y2),
                         type_coordinates= type_coordinates,
                         img_size        = (width, height),
                         confidence      = confidence,
                         bb_type         = bb_type,
                         format          = format)
        ret.append(bb)
    return ret


def calculate_mAP(img_gts_bbs, img_det_bbs, iou, method=MethodAveragePrecision.EVERY_POINT_INTERPOLATION) -> list:
    return get_pascalvoc_metrics(
        img_gts_bbs, img_det_bbs, iou, generate_table=True,
        method=MethodAveragePrecision.EVERY_POINT_INTERPOLATION
    )

# json_body = {
#     'taskId': 3813,
#     'fields': [
#         {
#             'field': 'data.tableClasses',
#             'payload': {
#                 'columns': ['classId', 'TP', 'FP', 'npos', 'Recall', 'Precision', 'AP'],
#                 'data': [
#                     ['cow', 14.0, 18.0, 23, 0.6087, 0.4375, 0.4073],
#                     ['car', 33.0, 28.0, 65, 0.5077, 0.541, 0.3418],
#                     ['person', 79.0, 131.0, 150, 0.5267, 0.3762, 0.3151],
#                     ['bottle', 11.0, 10.0, 19, 0.5789, 0.5238, 0.4407],
#                     ['horse', 12.0, 15.0, 27, 0.4444, 0.4444, 0.3574],
#                     ['chair', 27.0, 38.0, 82, 0.3293, 0.4154, 0.194],
#                     ['dog', 11.0, 15.0, 23, 0.4783, 0.4231, 0.2885],
#                     ['bicycle', 11.0, 8.0, 22, 0.5, 0.5789, 0.4146],
#                     ['cat', 24.0, 16.0, 44, 0.5455, 0.6, 0.3495],
#                     ['motorbike', 0.0, 0.0, 17, 0.0, nan, 0],
#                     ['sheep', 22.0, 9.0, 39, 0.5641, 0.7097, 0.5129],
#                     ['bus', 12.0, 8.0, 18, 0.6667, 0.6, 0.444],
#                     ['boat', 6.0, 14.0, 16, 0.375, 0.3, 0.2608],
#                     ['train', 10.0, 14.0, 18, 0.5556, 0.4167, 0.4084],
#                     ['bird', 11.0, 4.0, 15, 0.7333, 0.7333, 0.7069]]}},
#         {'field': 'data.lineChartOptions',
#          'payload': {'title': 'Line chart', 'showLegend': True}},
#         {'field': 'data.lineChartSeries',
#          'payload': [
#              {'name': 'cow',
#               'data': [[0.043478260869565216, 1.0], [0.043478260869565216, 0.5], [0.08695652173913043, 0.6666666666666666],
#                        [0.08695652173913043, 0.5], [0.13043478260869565, 0.6], [0.13043478260869565, 0.5],
#                        [0.17391304347826086, 0.5714285714285714], [0.17391304347826086, 0.5], [0.21739130434782608, 0.5555555555555556],
#                        [0.2608695652173913, 0.6], [0.2608695652173913, 0.5454545454545454], [0.30434782608695654, 0.5833333333333334],
#                        [0.34782608695652173, 0.6153846153846154], [0.391304347826087, 0.6428571428571429], [0.43478260869565216, 0.6666666666666666],
#                        [0.43478260869565216, 0.625], [0.4782608695652174, 0.6470588235294118], [0.4782608695652174, 0.6111111111111112],
#                        [0.4782608695652174, 0.5789473684210527], [0.5217391304347826, 0.6], [0.5217391304347826, 0.5714285714285714],
#                        [0.5217391304347826, 0.5454545454545454], [0.5217391304347826, 0.5217391304347826], [0.5652173913043478, 0.5416666666666666],
#                        [0.6086956521739131, 0.56], [0.6086956521739131, 0.5384615384615384], [0.6086956521739131, 0.5185185185185185],
#                        [0.6086956521739131, 0.5], [0.6086956521739131, 0.4827586206896552], [0.6086956521739131, 0.4666666666666667],
#                        [0.6086956521739131, 0.45161290322580644], [0.6086956521739131, 0.4375]]},
#              {'name': 'car',
#               'data': [[0.015384615384615385, 1.0], [0.015384615384615385, 0.5], [0.03076923076923077, 0.6666666666666666], [0.03076923076923077, 0.5],
#                        [0.046153846153846156, 0.6], [0.06153846153846154, 0.6666666666666666], [0.06153846153846154, 0.5714285714285714],
#                        [0.06153846153846154, 0.5], [0.07692307692307693, 0.5555555555555556], [0.09230769230769231, 0.6],
#                        [0.09230769230769231, 0.5454545454545454], [0.1076923076923077, 0.5833333333333334], [0.12307692307692308, 0.6153846153846154],
#                        [0.12307692307692308, 0.5714285714285714], [0.13846153846153847, 0.6], [0.13846153846153847, 0.5625],
#                        [0.15384615384615385, 0.5882352941176471], [0.15384615384615385, 0.5555555555555556], [0.16923076923076924, 0.5789473684210527],
#                        [0.18461538461538463, 0.6], [0.2, 0.6190476190476191], [0.2153846153846154, 0.6363636363636364],
#                        [0.23076923076923078, 0.6521739130434783], [0.24615384615384617, 0.6666666666666666], [0.24615384615384617, 0.64],
#                        [0.26153846153846155, 0.6538461538461539], [0.26153846153846155, 0.6296296296296297], [0.27692307692307694, 0.6428571428571429],
#                        [0.2923076923076923, 0.6551724137931034], [0.3076923076923077, 0.6666666666666666], [0.3230769230769231, 0.6774193548387096],
#                        [0.3230769230769231, 0.65625], [0.3384615384615385, 0.6666666666666666], [0.35384615384615387, 0.6764705882352942],
#                        [0.35384615384615387, 0.6571428571428571], [0.36923076923076925, 0.6666666666666666], [0.36923076923076925, 0.6486486486486487],
#                        [0.38461538461538464, 0.6578947368421053], [0.4, 0.6666666666666666], [0.4, 0.65], [0.4153846153846154, 0.6585365853658537],
#                        [0.4153846153846154, 0.6428571428571429], [0.4307692307692308, 0.6511627906976745], [0.4307692307692308, 0.6363636363636364],
#                        [0.4461538461538462, 0.6444444444444445], [0.4461538461538462, 0.6304347826086957], [0.4461538461538462, 0.6170212765957447],
#                        [0.4461538461538462, 0.6041666666666666], [0.4461538461538462, 0.5918367346938775], [0.4461538461538462, 0.58],
#                        [0.46153846153846156, 0.5882352941176471], [0.47692307692307695, 0.5961538461538461], [0.47692307692307695, 0.5849056603773585],
#                        [0.49230769230769234, 0.5925925925925926], [0.49230769230769234, 0.5818181818181818], [0.49230769230769234, 0.5714285714285714],
#                        [0.5076923076923077, 0.5789473684210527], [0.5076923076923077, 0.5689655172413793], [0.5076923076923077, 0.559322033898305],
#                        [0.5076923076923077, 0.55], [0.5076923076923077, 0.5409836065573771]]},
#              {'name': 'person',
#               'data': [[0.006666666666666667, 1.0], [0.006666666666666667, 0.5], [0.013333333333333334, 0.6666666666666666], [0.013333333333333334, 0.5],
#                        [0.02, 0.6], [0.02, 0.5], [0.02666666666666667, 0.5714285714285714], [0.03333333333333333, 0.625], [0.04, 0.6666666666666666],
#                        [0.04, 0.6], [0.04666666666666667, 0.6363636363636364], [0.05333333333333334, 0.6666666666666666], [0.06, 0.6923076923076923],
#                        [0.06666666666666667, 0.7142857142857143], [0.06666666666666667, 0.6666666666666666], [0.07333333333333333, 0.6875],
#                        [0.07333333333333333, 0.6470588235294118], [0.08, 0.6666666666666666], [0.08, 0.631578947368421], [0.08666666666666667, 0.65],
#                        [0.08666666666666667, 0.6190476190476191], [0.09333333333333334, 0.6363636363636364], [0.09333333333333334, 0.6086956521739131],
#                        [0.09333333333333334, 0.5833333333333334], [0.1, 0.6], [0.10666666666666667, 0.6153846153846154],
#                        [0.11333333333333333, 0.6296296296296297], [0.12, 0.6428571428571429], [0.12666666666666668, 0.6551724137931034],
#                        [0.12666666666666668, 0.6333333333333333], [0.13333333333333333, 0.6451612903225806], [0.14, 0.65625], [0.14, 0.6363636363636364],
#                        [0.14666666666666667, 0.6470588235294118], [0.14666666666666667, 0.6285714285714286], [0.15333333333333332, 0.6388888888888888],
#                        [0.15333333333333332, 0.6216216216216216], [0.16, 0.631578947368421], [0.16666666666666666, 0.6410256410256411],
#                        [0.16666666666666666, 0.625], [0.17333333333333334, 0.6341463414634146], [0.17333333333333334, 0.6190476190476191],
#                        [0.18, 0.627906976744186], [0.18, 0.6136363636363636], [0.18666666666666668, 0.6222222222222222],
#                        [0.19333333333333333, 0.6304347826086957], [0.2, 0.6382978723404256], [0.2, 0.625], [0.20666666666666667, 0.6326530612244898],
#                        [0.21333333333333335, 0.64], [0.21333333333333335, 0.6274509803921569], [0.21333333333333335, 0.6153846153846154],
#                        [0.22, 0.6226415094339622], [0.22, 0.6111111111111112], [0.22, 0.6], [0.22666666666666666, 0.6071428571428571],
#                        [0.23333333333333334, 0.6140350877192983], [0.23333333333333334, 0.603448275862069], [0.23333333333333334, 0.5932203389830508],
#                        [0.23333333333333334, 0.5833333333333334], [0.24, 0.5901639344262295], [0.24, 0.5806451612903226], [0.24, 0.5714285714285714],
#                        [0.24, 0.5625], [0.24666666666666667, 0.5692307692307692], [0.25333333333333335, 0.5757575757575758], [0.26, 0.582089552238806],
#                        [0.26, 0.5735294117647058], [0.26666666666666666, 0.5797101449275363], [0.26666666666666666, 0.5714285714285714],
#                        [0.2733333333333333, 0.5774647887323944], [0.28, 0.5833333333333334], [0.28, 0.5753424657534246],
#                        [0.2866666666666667, 0.581081081081081], [0.2866666666666667, 0.5733333333333334], [0.2866666666666667, 0.5657894736842105],
#                        [0.2866666666666667, 0.5584415584415584], [0.29333333333333333, 0.5641025641025641], [0.29333333333333333, 0.5569620253164557],
#                        [0.3, 0.5625], [0.3, 0.5555555555555556], [0.30666666666666664, 0.5609756097560976], [0.30666666666666664, 0.5542168674698795],
#                        [0.30666666666666664, 0.5476190476190477], [0.30666666666666664, 0.5411764705882353], [0.30666666666666664, 0.5348837209302325],
#                        [0.31333333333333335, 0.5402298850574713], [0.31333333333333335, 0.5340909090909091], [0.32, 0.5393258426966292],
#                        [0.32666666666666666, 0.5444444444444444], [0.3333333333333333, 0.5494505494505495], [0.3333333333333333, 0.5434782608695652],
#                        [0.34, 0.5483870967741935], [0.3466666666666667, 0.5531914893617021], [0.35333333333333333, 0.5578947368421052],
#                        [0.35333333333333333, 0.5520833333333334], [0.36, 0.5567010309278351], [0.36, 0.5510204081632653],
#                        [0.36666666666666664, 0.5555555555555556], [0.36666666666666664, 0.55], [0.36666666666666664, 0.5445544554455446],
#                        [0.36666666666666664, 0.5392156862745098], [0.37333333333333335, 0.5436893203883495], [0.38, 0.5480769230769231],
#                        [0.38, 0.5428571428571428], [0.38666666666666666, 0.5471698113207547], [0.3933333333333333, 0.5514018691588785],
#                        [0.4, 0.5555555555555556], [0.4066666666666667, 0.5596330275229358], [0.41333333333333333, 0.5636363636363636],
#                        [0.41333333333333333, 0.5585585585585585], [0.41333333333333333, 0.5535714285714286], [0.41333333333333333, 0.5486725663716814],
#                        [0.42, 0.5526315789473685], [0.42, 0.5478260869565217], [0.42, 0.5431034482758621], [0.42, 0.5384615384615384],
#                        [0.4266666666666667, 0.5423728813559322], [0.4266666666666667, 0.5378151260504201], [0.43333333333333335, 0.5416666666666666],
#                        [0.43333333333333335, 0.5371900826446281], [0.43333333333333335, 0.5327868852459017], [0.44, 0.5365853658536586],
#                        [0.44666666666666666, 0.5403225806451613], [0.44666666666666666, 0.536], [0.44666666666666666, 0.5317460317460317],
#                        [0.4533333333333333, 0.5354330708661418], [0.4533333333333333, 0.53125], [0.4533333333333333, 0.5271317829457365],
#                        [0.4533333333333333, 0.5230769230769231], [0.4533333333333333, 0.5190839694656488], [0.4533333333333333, 0.5151515151515151],
#                        [0.4533333333333333, 0.5112781954887218], [0.4533333333333333, 0.5074626865671642], [0.46, 0.5111111111111111],
#                        [0.46, 0.5073529411764706], [0.46, 0.5036496350364964], [0.4666666666666667, 0.5072463768115942],
#                        [0.4666666666666667, 0.5035971223021583], [0.4666666666666667, 0.5], [0.47333333333333333, 0.5035460992907801],
#                        [0.47333333333333333, 0.5], [0.47333333333333333, 0.4965034965034965], [0.47333333333333333, 0.4930555555555556],
#                        [0.47333333333333333, 0.4896551724137931], [0.47333333333333333, 0.4863013698630137], [0.47333333333333333, 0.48299319727891155],
#                        [0.47333333333333333, 0.4797297297297297], [0.47333333333333333, 0.47651006711409394], [0.47333333333333333, 0.47333333333333333],
#                        [0.47333333333333333, 0.47019867549668876], [0.47333333333333333, 0.46710526315789475], [0.47333333333333333, 0.46405228758169936],
#                        [0.48, 0.4675324675324675], [0.48, 0.4645161290322581], [0.48, 0.46153846153846156], [0.48, 0.4585987261146497],
#                        [0.4866666666666667, 0.4620253164556962], [0.4866666666666667, 0.4591194968553459], [0.4866666666666667, 0.45625],
#                        [0.4866666666666667, 0.453416149068323], [0.4866666666666667, 0.4506172839506173], [0.4866666666666667, 0.44785276073619634],
#                        [0.4866666666666667, 0.4451219512195122], [0.4866666666666667, 0.44242424242424244], [0.49333333333333335, 0.4457831325301205],
#                        [0.5, 0.4491017964071856], [0.5066666666666667, 0.4523809523809524], [0.5066666666666667, 0.44970414201183434],
#                        [0.5066666666666667, 0.4470588235294118], [0.5066666666666667, 0.4444444444444444], [0.5133333333333333, 0.4476744186046512],
#                        [0.5133333333333333, 0.44508670520231214], [0.5133333333333333, 0.4425287356321839], [0.5133333333333333, 0.44],
#                        [0.5133333333333333, 0.4375], [0.5133333333333333, 0.4350282485875706], [0.5133333333333333, 0.43258426966292135],
#                        [0.5133333333333333, 0.4301675977653631], [0.5133333333333333, 0.42777777777777776], [0.5133333333333333, 0.425414364640884],
#                        [0.5133333333333333, 0.4230769230769231], [0.5133333333333333, 0.4207650273224044], [0.5133333333333333, 0.41847826086956524],
#                        [0.5133333333333333, 0.41621621621621624], [0.5133333333333333, 0.41397849462365593], [0.5133333333333333, 0.4117647058823529],
#                        [0.5133333333333333, 0.4095744680851064], [0.5133333333333333, 0.4074074074074074], [0.5133333333333333, 0.4052631578947368],
#                        [0.5133333333333333, 0.4031413612565445], [0.5133333333333333, 0.4010416666666667], [0.5133333333333333, 0.39896373056994816],
#                        [0.5133333333333333, 0.39690721649484534], [0.5133333333333333, 0.39487179487179486], [0.5133333333333333, 0.39285714285714285],
#                        [0.52, 0.39593908629441626], [0.52, 0.3939393939393939], [0.52, 0.39195979899497485], [0.5266666666666666, 0.395],
#                        [0.5266666666666666, 0.39303482587064675], [0.5266666666666666, 0.3910891089108911], [0.5266666666666666, 0.3891625615763547],
#                        [0.5266666666666666, 0.3872549019607843], [0.5266666666666666, 0.3853658536585366], [0.5266666666666666, 0.38349514563106796],
#                        [0.5266666666666666, 0.38164251207729466], [0.5266666666666666, 0.3798076923076923], [0.5266666666666666, 0.37799043062200954],
#                        [0.5266666666666666, 0.3761904761904762]]},
#              {'name': 'bottle',
#               'data': [[0.05263157894736842, 1.0], [0.05263157894736842, 0.5], [0.10526315789473684, 0.6666666666666666], [0.15789473684210525, 0.75],
#                        [0.21052631578947367, 0.8], [0.2631578947368421, 0.8333333333333334], [0.2631578947368421, 0.7142857142857143],
#                        [0.3157894736842105, 0.75], [0.3684210526315789, 0.7777777777777778], [0.3684210526315789, 0.7],
#                        [0.42105263157894735, 0.7272727272727273], [0.42105263157894735, 0.6666666666666666], [0.42105263157894735, 0.6153846153846154],
#                        [0.42105263157894735, 0.5714285714285714], [0.47368421052631576, 0.6], [0.47368421052631576, 0.5625],
#                        [0.47368421052631576, 0.5294117647058824], [0.5263157894736842, 0.5555555555555556], [0.5789473684210527, 0.5789473684210527],
#                        [0.5789473684210527, 0.55], [0.5789473684210527, 0.5238095238095238]]},
#              {'name': 'horse',
#               'data': [[0.037037037037037035, 1.0], [0.07407407407407407, 1.0], [0.1111111111111111, 1.0], [0.14814814814814814, 1.0],
#                        [0.14814814814814814, 0.8], [0.18518518518518517, 0.8333333333333334], [0.2222222222222222, 0.8571428571428571],
#                        [0.2222222222222222, 0.75], [0.25925925925925924, 0.7777777777777778], [0.25925925925925924, 0.7],
#                        [0.2962962962962963, 0.7272727272727273], [0.2962962962962963, 0.6666666666666666], [0.3333333333333333, 0.6923076923076923],
#                        [0.3333333333333333, 0.6428571428571429], [0.3333333333333333, 0.6], [0.3333333333333333, 0.5625],
#                        [0.37037037037037035, 0.5882352941176471], [0.37037037037037035, 0.5555555555555556], [0.4074074074074074, 0.5789473684210527],
#                        [0.4074074074074074, 0.55], [0.4444444444444444, 0.5714285714285714], [0.4444444444444444, 0.5454545454545454],
#                        [0.4444444444444444, 0.5217391304347826], [0.4444444444444444, 0.5], [0.4444444444444444, 0.48],
#                        [0.4444444444444444, 0.46153846153846156], [0.4444444444444444, 0.4444444444444444]]},
#              {'name': 'chair',
#               'data': [[0.012195121951219513, 1.0], [0.024390243902439025, 1.0], [0.024390243902439025, 0.6666666666666666],
#                        [0.036585365853658534, 0.75], [0.04878048780487805, 0.8], [0.04878048780487805, 0.6666666666666666],
#                        [0.06097560975609756, 0.7142857142857143], [0.06097560975609756, 0.625], [0.07317073170731707, 0.6666666666666666],
#                        [0.07317073170731707, 0.6], [0.08536585365853659, 0.6363636363636364], [0.08536585365853659, 0.5833333333333334],
#                        [0.0975609756097561, 0.6153846153846154], [0.0975609756097561, 0.5714285714285714], [0.0975609756097561, 0.5333333333333333],
#                        [0.10975609756097561, 0.5625], [0.10975609756097561, 0.5294117647058824], [0.12195121951219512, 0.5555555555555556],
#                        [0.12195121951219512, 0.5263157894736842], [0.13414634146341464, 0.55], [0.13414634146341464, 0.5238095238095238],
#                        [0.13414634146341464, 0.5], [0.13414634146341464, 0.4782608695652174], [0.14634146341463414, 0.5], [0.14634146341463414, 0.48],
#                        [0.15853658536585366, 0.5], [0.15853658536585366, 0.48148148148148145], [0.17073170731707318, 0.5],
#                        [0.18292682926829268, 0.5172413793103449], [0.18292682926829268, 0.5], [0.1951219512195122, 0.5161290322580645],
#                        [0.1951219512195122, 0.5], [0.2073170731707317, 0.5151515151515151], [0.2073170731707317, 0.5],
#                        [0.21951219512195122, 0.5142857142857142], [0.21951219512195122, 0.5], [0.23170731707317074, 0.5135135135135135],
#                        [0.24390243902439024, 0.5263157894736842], [0.24390243902439024, 0.5128205128205128], [0.24390243902439024, 0.5],
#                        [0.24390243902439024, 0.4878048780487805], [0.24390243902439024, 0.47619047619047616], [0.24390243902439024, 0.46511627906976744],
#                        [0.24390243902439024, 0.45454545454545453], [0.24390243902439024, 0.4444444444444444], [0.25609756097560976, 0.45652173913043476],
#                        [0.25609756097560976, 0.44680851063829785], [0.2682926829268293, 0.4583333333333333], [0.2804878048780488, 0.46938775510204084],
#                        [0.2926829268292683, 0.48], [0.2926829268292683, 0.47058823529411764], [0.2926829268292683, 0.46153846153846156],
#                        [0.2926829268292683, 0.4528301886792453], [0.3048780487804878, 0.46296296296296297], [0.3048780487804878, 0.45454545454545453],
#                        [0.3170731707317073, 0.4642857142857143], [0.3170731707317073, 0.45614035087719296], [0.3170731707317073, 0.4482758620689655],
#                        [0.3170731707317073, 0.4406779661016949], [0.3170731707317073, 0.43333333333333335], [0.3170731707317073, 0.4262295081967213],
#                        [0.3170731707317073, 0.41935483870967744], [0.3170731707317073, 0.4126984126984127], [0.32926829268292684, 0.421875],
#                        [0.32926829268292684, 0.4153846153846154]]},
#              {'name': 'dog',
#               'data': [[0.043478260869565216, 1.0], [0.08695652173913043, 1.0], [0.08695652173913043, 0.6666666666666666], [0.08695652173913043, 0.5],
#                        [0.13043478260869565, 0.6], [0.13043478260869565, 0.5], [0.13043478260869565, 0.42857142857142855], [0.17391304347826086, 0.5],
#                        [0.17391304347826086, 0.4444444444444444], [0.21739130434782608, 0.5], [0.21739130434782608, 0.45454545454545453],
#                        [0.2608695652173913, 0.5], [0.30434782608695654, 0.5384615384615384], [0.30434782608695654, 0.5],
#                        [0.34782608695652173, 0.5333333333333333], [0.34782608695652173, 0.5], [0.34782608695652173, 0.47058823529411764],
#                        [0.34782608695652173, 0.4444444444444444], [0.34782608695652173, 0.42105263157894735], [0.391304347826087, 0.45],
#                        [0.391304347826087, 0.42857142857142855], [0.43478260869565216, 0.45454545454545453], [0.43478260869565216, 0.43478260869565216],
#                        [0.43478260869565216, 0.4166666666666667], [0.4782608695652174, 0.44], [0.4782608695652174, 0.4230769230769231]]},
#              {'name': 'bicycle',
#               'data': [[0.045454545454545456, 1.0], [0.09090909090909091, 1.0], [0.13636363636363635, 1.0], [0.18181818181818182, 1.0],
#                        [0.18181818181818182, 0.8], [0.22727272727272727, 0.8333333333333334], [0.22727272727272727, 0.7142857142857143],
#                        [0.2727272727272727, 0.75], [0.3181818181818182, 0.7777777777777778], [0.3181818181818182, 0.7],
#                        [0.36363636363636365, 0.7272727272727273], [0.36363636363636365, 0.6666666666666666], [0.4090909090909091, 0.6923076923076923],
#                        [0.4090909090909091, 0.6428571428571429], [0.45454545454545453, 0.6666666666666666], [0.45454545454545453, 0.625],
#                        [0.5, 0.6470588235294118], [0.5, 0.6111111111111112], [0.5, 0.5789473684210527]]},
#              {'name': 'cat',
#               'data': [[0.0, 0.0], [0.022727272727272728, 0.5], [0.022727272727272728, 0.3333333333333333], [0.045454545454545456, 0.5],
#                        [0.045454545454545456, 0.4], [0.06818181818181818, 0.5], [0.06818181818181818, 0.42857142857142855], [0.09090909090909091, 0.5],
#                        [0.11363636363636363, 0.5555555555555556], [0.13636363636363635, 0.6], [0.1590909090909091, 0.6363636363636364],
#                        [0.1590909090909091, 0.5833333333333334], [0.18181818181818182, 0.6153846153846154], [0.20454545454545456, 0.6428571428571429],
#                        [0.20454545454545456, 0.6], [0.22727272727272727, 0.625], [0.22727272727272727, 0.5882352941176471], [0.25, 0.6111111111111112],
#                        [0.25, 0.5789473684210527], [0.2727272727272727, 0.6], [0.29545454545454547, 0.6190476190476191],
#                        [0.3181818181818182, 0.6363636363636364], [0.3409090909090909, 0.6521739130434783], [0.3409090909090909, 0.625],
#                        [0.36363636363636365, 0.64], [0.36363636363636365, 0.6153846153846154], [0.38636363636363635, 0.6296296296296297],
#                        [0.38636363636363635, 0.6071428571428571], [0.4090909090909091, 0.6206896551724138], [0.4318181818181818, 0.6333333333333333],
#                        [0.4318181818181818, 0.6129032258064516], [0.45454545454545453, 0.625], [0.45454545454545453, 0.6060606060606061],
#                        [0.4772727272727273, 0.6176470588235294], [0.4772727272727273, 0.6], [0.5, 0.6111111111111112], [0.5, 0.5945945945945946],
#                        [0.5, 0.5789473684210527], [0.5227272727272727, 0.5897435897435898], [0.5454545454545454, 0.6]]},
#              {'name': 'motorbike',
#               'data': []},
#              {'name': 'sheep',
#               'data': [[0.02564102564102564, 1.0], [0.05128205128205128, 1.0], [0.07692307692307693, 1.0], [0.07692307692307693, 0.75],
#                        [0.10256410256410256, 0.8], [0.1282051282051282, 0.8333333333333334], [0.15384615384615385, 0.8571428571428571],
#                        [0.1794871794871795, 0.875], [0.20512820512820512, 0.8888888888888888], [0.23076923076923078, 0.9],
#                        [0.2564102564102564, 0.9090909090909091], [0.28205128205128205, 0.9166666666666666], [0.3076923076923077, 0.9230769230769231],
#                        [0.3333333333333333, 0.9285714285714286], [0.3333333333333333, 0.8666666666666667], [0.358974358974359, 0.875],
#                        [0.38461538461538464, 0.8823529411764706], [0.41025641025641024, 0.8888888888888888], [0.41025641025641024, 0.8421052631578947],
#                        [0.4358974358974359, 0.85], [0.46153846153846156, 0.8571428571428571], [0.48717948717948717, 0.8636363636363636],
#                        [0.5128205128205128, 0.8695652173913043], [0.5128205128205128, 0.8333333333333334], [0.5128205128205128, 0.8],
#                        [0.5128205128205128, 0.7692307692307693], [0.5384615384615384, 0.7777777777777778], [0.5641025641025641, 0.7857142857142857],
#                        [0.5641025641025641, 0.7586206896551724], [0.5641025641025641, 0.7333333333333333], [0.5641025641025641, 0.7096774193548387]]},
#              {'name': 'bus',
#               'data': [[0.05555555555555555, 1.0], [0.05555555555555555, 0.5], [0.1111111111111111, 0.6666666666666666], [0.16666666666666666, 0.75],
#                        [0.16666666666666666, 0.6], [0.2222222222222222, 0.6666666666666666], [0.2222222222222222, 0.5714285714285714],
#                        [0.2777777777777778, 0.625], [0.2777777777777778, 0.5555555555555556], [0.3333333333333333, 0.6],
#                        [0.3333333333333333, 0.5454545454545454], [0.3333333333333333, 0.5], [0.3888888888888889, 0.5384615384615384],
#                        [0.3888888888888889, 0.5], [0.4444444444444444, 0.5333333333333333], [0.5, 0.5625], [0.5, 0.5294117647058824],
#                        [0.5555555555555556, 0.5555555555555556], [0.6111111111111112, 0.5789473684210527], [0.6666666666666666, 0.6]]},
#              {'name': 'boat',
#               'data': [[0.0625, 1.0], [0.0625, 0.5], [0.125, 0.6666666666666666], [0.1875, 0.75], [0.1875, 0.6], [0.1875, 0.5],
#                        [0.25, 0.5714285714285714], [0.25, 0.5], [0.3125, 0.5555555555555556], [0.3125, 0.5], [0.375, 0.5454545454545454],
#                        [0.375, 0.5], [0.375, 0.46153846153846156], [0.375, 0.42857142857142855], [0.375, 0.4], [0.375, 0.375],
#                        [0.375, 0.35294117647058826], [0.375, 0.3333333333333333], [0.375, 0.3157894736842105], [0.375, 0.3]]},
#              {'name': 'train',
#               'data': [[0.05555555555555555, 1.0], [0.1111111111111111, 1.0], [0.1111111111111111, 0.6666666666666666], [0.16666666666666666, 0.75],
#                        [0.16666666666666666, 0.6], [0.2222222222222222, 0.6666666666666666], [0.2222222222222222, 0.5714285714285714],
#                        [0.2777777777777778, 0.625], [0.3333333333333333, 0.6666666666666666], [0.3333333333333333, 0.6],
#                        [0.3888888888888889, 0.6363636363636364], [0.4444444444444444, 0.6666666666666666], [0.4444444444444444, 0.6153846153846154],
#                        [0.5, 0.6428571428571429], [0.5, 0.6], [0.5555555555555556, 0.625], [0.5555555555555556, 0.5882352941176471],
#                        [0.5555555555555556, 0.5555555555555556], [0.5555555555555556, 0.5263157894736842], [0.5555555555555556, 0.5],
#                        [0.5555555555555556, 0.47619047619047616], [0.5555555555555556, 0.45454545454545453], [0.5555555555555556, 0.43478260869565216],
#                        [0.5555555555555556, 0.4166666666666667]]},
#              {'name': 'bird',
#               'data': [[0.06666666666666667, 1.0], [0.13333333333333333, 1.0], [0.2, 1.0], [0.26666666666666666, 1.0], [0.3333333333333333, 1.0],
#                        [0.4, 1.0], [0.4666666666666667, 1.0], [0.5333333333333333, 1.0], [0.5333333333333333, 0.8888888888888888], [0.6, 0.9],
#                        [0.6666666666666666, 0.9090909090909091], [0.6666666666666666, 0.8333333333333334], [0.6666666666666666, 0.7692307692307693],
#                        [0.7333333333333333, 0.7857142857142857], [0.7333333333333333, 0.7333333333333333]]}]}]}
def dict2tuple(dictionary, round_level=4):
    FP = 0
    TP = 0
    npos = 0
    try:
        for dict_ in dictionary['per_class']:
            dict__ = dictionary['per_class'][dict_]
            FP += dict__['total FP']
            TP += dict__['total TP']
            npos += dict__['total positives']
    except:
        return result(None, None, None, None, None)
    AP = round(dictionary['mAP'], round_level)
    Recall = round(TP / npos, round_level)
    Precision = round(np.divide(TP, (FP + TP)), round_level)
    return result(TP, FP, Precision, Recall, AP)





def process(src_project, dst_project, ious = [0.5, 0.75], round_level = 4):
    """ The function receives project identifiers and receives data from the server
    according to these identifiers, calculates metrics and returns the result as lists of
    structured data like:

            tuple(name, IOU05('TP', 'FP', 'Precision', 'Recall', 'AP'), IOU075('TP', 'FP', 'Precision', 'Recall', 'AP'))

    Args:
        param1 (sly.project): sly.project object for source project.
        param2 (sly.project): sly.project object for source project.
        param3 (list)       : list of IOU thresholds for evaluation
        param4 (int)        : pretty parameter for floating point values

    Returns:
        tuple: The return value: project_mAP, dataset_mAP, image_mAP
    """
    # round_level: round(target_value, round_level): round(0.123456, round_level) --> 0.1235
    # ious: list of IOU thresholds
    # storage lists for images, datasets, projects
    image_mAP   = []  # image_name   + mAP_05 + mAP_075
    dataset_mAP = []  # dataset_name + mAP_05 + mAP_075
    project_mAP = []  # project_name + mAP_05 + mAP_075

    project_gts_bbs = []
    project_det_bbs = []

    for src, dst in zip(api.dataset.get_list(src_project.id), api.dataset.get_list(dst_project.id)):
        src_images = api.image.get_list(src.id)
        dst_images = api.image.get_list(dst.id)

        dataset_gts_bbs = []
        dataset_det_bbs = []

        for src_batch, dst_batch in zip(sly.batched(src_images, batch_size=10),
                                        sly.batched(dst_images, batch_size=10)):
            src_image_ids   = [image_info.id for image_info in src_batch]
            src_image_names = [image_info.name for image_info in src_batch]
            dst_image_ids   = [image_info.id for image_info in dst_batch]
            dst_image_names = [image_info.name for image_info in dst_batch]

            src_annotations = api.annotation.download_batch(src.id, src_image_ids)
            dst_annotations = api.annotation.download_batch(dst.id, dst_image_ids)
            assert len(src_annotations) == len(dst_annotations), \
                'Lenghst of src_annotations and dst_annotations must be the same!'
            for src_annotation, dst_annotation in zip(src_annotations, dst_annotations):
                img_gts_bbs = plt2bb(src_annotation)
                img_det_bbs = plt2bb(dst_annotation, bb_type=BBType.DETECTED)
                dataset_gts_bbs.extend(img_gts_bbs)
                dataset_det_bbs.extend(img_det_bbs)
                image_mAPs = []
                for iou in ious:
                    dict_res = get_pascalvoc_metrics(
                        img_gts_bbs, img_det_bbs, iou, generate_table=True,
                        method=MethodAveragePrecision.EVERY_POINT_INTERPOLATION
                    )
                    image_mAPs.append(dict_res)

                image_mAP.append(
                    struct(
                        name=src_annotation.image_name,
                        mAP_05=dict2tuple(image_mAPs[0], round_level),
                        mAP_075=dict2tuple(image_mAPs[1], round_level)
                    )
                )

        project_gts_bbs.extend(dataset_gts_bbs)
        project_det_bbs.extend(dataset_det_bbs)

        mAPs = []
        for iou in ious:
            dict_res = get_pascalvoc_metrics(
                dataset_gts_bbs, dataset_det_bbs, iou, generate_table=True,
                method=MethodAveragePrecision.EVERY_POINT_INTERPOLATION
            )
            mAPs.append(dict_res)

        dataset_mAP.append(
            struct(
                name=src.name,
                mAP_05=dict2tuple(mAPs[0], round_level),
                mAP_075=dict2tuple(mAPs[1], round_level)
            )
        )

    mAPs = []
    for iou in ious:
        dict_res = get_pascalvoc_metrics(
            project_gts_bbs, project_det_bbs, iou, generate_table=True,
            method=MethodAveragePrecision.EVERY_POINT_INTERPOLATION
        )
        mAPs.append(dict_res)

    project_mAP.append(
        struct(
            name=src_project.name,
            mAP_05=dict2tuple(mAPs[0], round_level),
            mAP_075=dict2tuple(mAPs[1], round_level)
        )
    )
    return project_mAP, dataset_mAP, image_mAP
